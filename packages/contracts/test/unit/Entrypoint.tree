Entrypoint::constructor
└── when deployed
    ├── it disables initializers
    └── it doesn't set any roles

Entrypoint::initialize
├── when called first time
│   ├── it grants owner role to owner address
│   ├── it grants admin role to admin address
│   ├── it sets up roles hierarchy correctly
│   ├── it allows receiving ETH
│   └── it emits RoleGranted events
├── when called with zero addresses
│   ├── when owner is zero
│   │   └── it reverts
│   └── when admin is zero
│       └── it reverts
└── when called after initialization
    └── it reverts

Entrypoint::updateRoot
├── when called by admin
│   ├── when passing valid root and IPFS hash
│   │   ├── it adds new association set
│   │   ├── it sets correct timestamp
│   │   ├── it returns correct index
│   │   ├── it maintains sequential indexing
│   │   ├── it preserves previous sets
│   │   └── it emits RootUpdated with correct params
│   ├── when passing empty root
│   │   └── it reverts with EmptyRoot
│   ├── when passing empty IPFS hash
│   │   └── it reverts with EmptyIPFSHash
│   └── when updating multiple times
│       ├── it maintains correct order
│       └── it preserves historical data
└── when called by non-admin
    ├── when called by owner
    │   └── it reverts
    └── when called by regular user
        └── it reverts

Entrypoint::deposit(ETH)
├── when pool exists
│   ├── when value meets minimum
│   │   ├── it calculates fees correctly
│   │   ├── it forwards correct amount to pool
│   │   ├── it retains fees in contract
│   │   ├── it handles dust amounts correctly
│   │   ├── it manages pool balance properly
│   │   └── it emits Deposited with correct params
│   ├── when value exactly equals minimum
│   │   ├── it processes deposit
│   │   └── it calculates fees correctly
│   ├── when value below minimum
│   │   └── it reverts with MinimumDepositAmount
│   └── when pool is at capacity
│       └── it reverts
├── when pool doesn't exist
│   └── it reverts with PoolNotFound
└── when sending extra ETH
    └── it reverts

Entrypoint::deposit(ERC20)
├── when pool exists
│   ├── when value meets minimum
│   │   ├── when sufficient allowance
│   │   │   ├── it transfers tokens from sender
│   │   │   ├── it calculates fees correctly
│   │   │   ├── it retains fees in contract
│   │   │   ├── it forwards correct amount to pool
│   │   │   ├── it handles non-standard tokens
│   │   │   ├── it handles rebasing tokens
│   │   │   ├── it handles fee-on-transfer tokens
│   │   │   └── it emits Deposited with correct params
│   │   └── when insufficient allowance
│   │       └── it reverts
│   ├── when value exactly equals minimum
│   │   ├── it processes deposit
│   │   └── it calculates fees correctly
│   ├── when value below minimum
│   │   └── it reverts with MinimumDepositAmount
│   └── when pool is at capacity
│       └── it reverts
├── when pool doesn't exist
│   └── it reverts with PoolNotFound
└── when token has special behavior
    ├── when token is pausable
    │   └── it handles paused state
    ├── when token has blacklist
    │   └── it handles blacklisted addresses
    └── when token has transfer restrictions
        └── it handles transfer limitations

Entrypoint::relay
├── when pool exists
│   ├── when processooor is valid
│   │   ├── when proof is valid
│   │   │   ├── it processes withdrawal correctly
│   │   │   ├── it calculates fee splits accurately
│   │   │   ├── it transfers correct amount to recipient
│   │   │   ├── it transfers correct fees to fee recipient
│   │   │   ├── it maintains pool balance invariant
│   │   │   ├── it handles zero fee cases
│   │   │   ├── it handles maximum fee cases
│   │   │   └── it emits WithdrawalRelayed with correct params
│   │   ├── when proof is invalid
│   │   │   └── it reverts
│   │   └── when withdrawal amount exceeds balance
│   │       └── it reverts
│   ├── when processooor is invalid
│   │   └── it reverts with InvalidProcessooor
│   └── when pool state changes during transaction
│       └── it handles race conditions
├── when pool doesn't exist
│   └── it reverts with PoolNotFound
└── when system is under stress
    ├── it handles high gas scenarios
    └── it maintains consistent state

Entrypoint::registerPool
├── when called by admin
│   ├── when pool not registered
│   │   ├── it registers pool correctly
│   │   ├── it sets correct asset configuration
│   │   ├── it sets minimum deposit amount
│   │   ├── it sets fee basis points
│   │   ├── it maps scope to pool
│   │   ├── it approves pool for asset transfers
│   │   ├── it handles ETH pools
│   │   ├── it handles ERC20 pools
│   │   └── it emits PoolRegistered with correct params
│   ├── when asset pool exists
│   │   └── it reverts with AssetPoolAlreadyRegistered
│   ├── when scope pool exists
│   │   └── it reverts with ScopePoolAlreadyRegistered
│   └── when invalid parameters
│       ├── when zero address pool
│       │   └── it reverts
│       ├── when zero minimum deposit
│       │   └── it reverts
│       └── when fee exceeds maximum
│           └── it reverts
└── when called by non-admin
    ├── when called by owner
    │   └── it reverts
    └── when called by regular user
        └── it reverts

Entrypoint::removePool
├── when called by admin
│   ├── when pool exists
│   │   ├── it removes pool mapping
│   │   ├── it removes asset config
│   │   ├── it maintains other pool configurations
│   │   └── it emits PoolRemoved with correct params
│   └── when pool doesn't exist
│       └── it reverts with PoolNotFound
└── when called by non-admin
    └── it reverts

Entrypoint::windDownPool
├── when called by owner
│   ├── when pool exists
│   │   ├── it calls pool windDown successfully
│   │   ├── it maintains pool in registry
│   │   └── it emits PoolWindDown
│   └── when pool doesn't exist
│       └── it reverts
└── when called by non-owner
    ├── when called by admin
    │   └── it reverts
    └── when called by regular user
        └── it reverts

Entrypoint::withdrawFees
├── when called by admin
│   ├── for ETH
│   │   ├── when balance exists
│   │   │   ├── it transfers full balance
│   │   │   ├── it handles transfer success
│   │   │   └── it emits FeesWithdrawn
│   │   └── when zero balance
│   │       └── it completes successfully
│   └── for ERC20
│       ├── when balance exists
│       │   ├── it transfers full balance
│       │   ├── it handles transfer success
│       │   └── it emits FeesWithdrawn
│       └── when zero balance
│           └── it completes successfully
└── when called by non-admin
    └── it reverts

Entrypoint::view functions
├── latestRoot
│   ├── when sets exist
│   │   └── it returns latest root
│   └── when no sets exist
│       └── it returns zero
└── rootByIndex
    ├── when index valid
    │   └── it returns correct root
    └── when index invalid
        └── it reverts
